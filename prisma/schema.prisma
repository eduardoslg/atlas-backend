// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id       String  @id @default(uuid()) @db.Uuid
  name     String  @db.VarChar(150)
  email    String  @unique @db.VarChar(120)
  password String  @default(uuid())
  active   Boolean @default(true)

  role Role @default(MEMBER)

  clientId String? @map("client_id") @db.Uuid

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  client              Client?               @relation(fields: [clientId], references: [id])
  meetingRoomSchedule MeetingRoomSchedule[]

  @@map("users")
}

model Client {
  id String @id @default(uuid()) @db.Uuid

  businessName String  @map("business_name") @db.VarChar(150)
  cnpj         String? @unique @db.Char(14)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user        User[]
  meetingRoom MeetingRoom[]

  @@map("clients")
}

model MeetingRoom {
  id String @id @default(uuid()) @db.Uuid

  clientId   String   @map("client_id") @db.Uuid
  alias      String   @db.VarChar(50)
  capacity   Int
  direction  String   @db.VarChar(100)
  startedAt  DateTime @map("started_at")
  finishedAt DateTime @map("finished_at")
  color      String?  @db.VarChar(7)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  client              Client                @relation(fields: [clientId], references: [id])
  meetingRoomSchedule MeetingRoomSchedule[]

  @@map("meeting_rooms")
}

model MeetingRoomSchedule {
  id String @id @default(uuid()) @db.Uuid

  userId        String   @db.Uuid
  meetingRoomId String   @map("meeting_room_id")
  startedAt     DateTime @map("started_at")
  finishedAt    DateTime @map("finished_at")
  reason        String   @db.VarChar(200)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user        User        @relation(fields: [userId], references: [id])
  meetingRoom MeetingRoom @relation(fields: [meetingRoomId], references: [id])

  @@map("meeting_room_schedules")
}
